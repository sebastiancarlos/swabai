#!/usr/bin/env bash

# wm-workspace-kill
# - close all windows in a workspace (but leave floating ones)

# get platform info, populates 'platform' and 'apple_silicon' variables
source ./lib/platform.sh

shopt -s xpg_echo

bold="\033[1m"
green="\033[32m"
reset="\033[0m"

# print usage with -h/--help
if [[ "$#" -eq 1 && ("$1" == "-h" || "$1" == "--help") ]]; then
    echo "${bold}Usage:${reset} ${green}wm-workspace-kill${reset} [workspace-name]"
    echo "  - Close all windows in the provided workspace (but leave floating ones)"
    echo "  - If no workspace is provided, uses the currently focused workspace"
    exit 0
fi

current_workspace=$(wm-workspace-get-current)
if [[ "$#" -eq 0 ]]; then
  workspace="$current_workspace"
else
  workspace="$1"
fi


if [[ "$platform" == "macos" ]]; then
  # find pids of all windows with "has-focus" set to false in the current workspace
  non_focused_window_pids=$(yabai -m query --windows --space | jq -r '.[] | select(."has-focus"==false) | .pid')
  # get PID of every window and kill it
  for pid in $non_focused_window_pids; do
    kill -9 $pid
  done
  # finally, kill the current window
  window_pid=$(yabai -m query --windows --window | jq -r '.pid')
  kill -9 $window_pid
  echo "Closed all windows in all workspaces"
  exit
else
  windows=$(swaymsg -t get_tree | jq -r --arg workspace "$workspace" '.nodes[].nodes[] | select(.name==$workspace) | .nodes[].id')
  for window in $windows; do
    swaymsg '[con_id='$window'] kill'
  done
fi

message="Killed all windows in workspace ${bold}$workspace${reset}"
if [[ "$workspace" == "$current_workspace" ]]; then
  message="$message (current)" 
fi
echo "$message"
