#!/usr/bin/env bash

# background-execute

shopt -s xpg_echo

bold="\033[1m"
green="\033[32m"
red="\033[31m"
reset="\033[0m"

usage() {
  echo "${bold}Usage:${reset} ${green}background-exec${reset} [OPTIONS] [--]  <command> [arguments...]"
  echo "       ${green}background-exec${reset} [OPTIONS] [--] '<command> [arguments...]'"
  echo
  echo "- Launch a command in the background, with no output, and outside of the job control."
  echo
  echo "Options:"
  echo "  -d, --debug               Print debug output."
  echo "  -w, --quiet               Disable output."
  echo "  -h, --help                Show this help message."
}

# parse options
quiet=0
debug=0
while true; do
  case "$1" in
    -q|--quiet)
      quiet=1
      shift
      ;;
    -d|--debug)
      debug=1
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

# print usage on invalid arguments or -h/--help
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  usage
  exit 0
fi

[[ $quiet -eq 0 ]] && echo "${bold}background-exec:${reset} Launching ${green}$@${reset} ..."

# prepare by cleaning latest exit code, if any
exit_code_file="/tmp/background-exec.${USER}"
rm -f ${exit_code_file} > /dev/null 2>&1

# parse arguments into "cmd" and "args"
if [[ "$#" -eq 1 ]]; then
    # if there is only one argument, expand it into parameters with 'eval' to
    # handle quoted arguments
    eval "args=($1)"
    cmd=${args[0]}
    args=("${args[@]:1}")
else
    cmd=$1
    shift
    args=("$@")
fi

# debug info
if [[ $debug -eq 1 ]]; then
  echo background-exec: cmd: $cmd
  echo background-exec: args: "${args[@]}"
  for arg in "${args[@]}"; do
    echo "background-exec:   $arg"
  done
fi

# This is where the magic happens:
# - Launch in the background
# - Launch in a subshell to avoid adding to the shell's job control
# - Redirect all output to /dev/null
# - Make exit code available to this script
(
  ${cmd} "${args[@]}" > /dev/null 2>&1
  echo $?
) > ${exit_code_file} &

# # If exit code exists and is not 0, exit with that code
exit_code=$(cat ${exit_code_file})
if [[ $exit_code -ne 0 ]]; then
  [[ $quiet -eq 0 ]] && echo "${bold}background-exec:${reset} ${red}Error:${reset} Command exited with code ${bold}$exit_code${reset}"
  rm -f ${exit_code_file} > /dev/null 2>&1
  exit $exit_code
fi

[[ $quiet -eq 0 ]] && echo "${bold}background-exec:${reset} ${green}Done!${reset}"
